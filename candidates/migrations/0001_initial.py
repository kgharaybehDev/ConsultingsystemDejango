# Generated by Django 5.1.2 on 2024-11-06 00:12

import candidates.models
import ckeditor.fields
import django.db.models.deletion
import django_countries.fields
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("utilities", "0002_licenseprovider"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Candidate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_open_to_work",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("NO", "No")],
                        max_length=5,
                        verbose_name="Open to Work",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="First Name"
                    ),
                ),
                (
                    "second_name",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="Second Name"
                    ),
                ),
                (
                    "third_name",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="Third Name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="Last Name"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female")],
                        max_length=1,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "birthday",
                    models.DateField(blank=True, null=True, verbose_name="Birthday"),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Address"
                    ),
                ),
                (
                    "call_phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[candidates.models.validate_phone_number],
                        verbose_name="Call Phone Number",
                    ),
                ),
                (
                    "whatsapp_phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[candidates.models.validate_phone_number],
                        verbose_name="WhatsApp Phone Number",
                    ),
                ),
                (
                    "personal_image",
                    models.ImageField(
                        blank=True,
                        max_length=500,
                        null=True,
                        upload_to=candidates.models.profile_image_upload_path,
                        verbose_name="Personal Image",
                    ),
                ),
                (
                    "national_id_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="National ID Number",
                    ),
                ),
                (
                    "national_id_copy",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.id_copy_upload_path,
                        verbose_name="National ID Copy",
                    ),
                ),
                (
                    "passport_copy",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.passport_copy_upload_path,
                        verbose_name="Passport Copy",
                    ),
                ),
                (
                    "passport_expiration_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Passport Expiration Date"
                    ),
                ),
                (
                    "passport_id",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="Passport ID"
                    ),
                ),
                (
                    "resume_copy",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.resume_upload_path,
                        verbose_name="Resume Copy",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "country",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="utilities.country",
                        verbose_name="Country",
                    ),
                ),
                (
                    "nationality",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="utilities.nationality",
                        verbose_name="Nationality",
                    ),
                ),
            ],
            options={
                "verbose_name": "Candidate",
                "verbose_name_plural": "Candidates",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CandidateApplicationData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "HMC_Portal_email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name="HMC Portal Email",
                    ),
                ),
                (
                    "HMC_Portal_password",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="HMC Portal Password",
                    ),
                ),
                (
                    "JOB_OFFER_ID",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="JOB OFFER ID",
                    ),
                ),
                (
                    "DataFlow_issue_date",
                    models.DateField(blank=True, null=True, verbose_name="Issue Date"),
                ),
                (
                    "DataFlow_expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "DataFlow_case_number",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Case Number",
                    ),
                ),
                (
                    "DataFlow_passport_number",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Passport Number",
                    ),
                ),
                (
                    "DataFlow_is_paid",
                    models.BooleanField(
                        blank=True, default=False, null=True, verbose_name="Is Paid"
                    ),
                ),
                (
                    "DataFlow_certificate_copy",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.candidate_dataflow_certificates,
                        verbose_name="DataFlow Certificate Copy",
                    ),
                ),
                (
                    "DHP_email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name="Email"
                    ),
                ),
                (
                    "DHP_number",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="DHP Number"
                    ),
                ),
                (
                    "DHP_Password",
                    models.CharField(
                        blank=True,
                        default="###",
                        max_length=50,
                        null=True,
                        verbose_name="DHP Password",
                    ),
                ),
                (
                    "DHP_issue_date",
                    models.DateField(blank=True, null=True, verbose_name="Issue Date"),
                ),
                (
                    "DHP_expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "DHP_copy",
                    models.FileField(
                        blank=True,
                        help_text="DHP certificate",
                        null=True,
                        upload_to=candidates.models.candidate_dhp_certificates,
                        verbose_name="DHP Certificate Copy",
                    ),
                ),
                (
                    "DHP_note",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Note"
                    ),
                ),
                (
                    "is_dataflow",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="Is Dataflow Candidate",
                    ),
                ),
                (
                    "is_Prometric",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="Is Prometric Candidate",
                    ),
                ),
                (
                    "is_completed_payment",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="Is Complete Payment",
                    ),
                ),
                (
                    "PCC_issue_date",
                    models.DateField(blank=True, null=True, verbose_name="Issue Date"),
                ),
                (
                    "PCC_is_stamp",
                    models.BooleanField(
                        blank=True, default=False, null=True, verbose_name="Is Stamped"
                    ),
                ),
                (
                    "PCC_clearance_copy",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.candidate_police_clearance,
                        verbose_name="Police Clearance Certificate Copy",
                    ),
                ),
                (
                    "PCC_expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "Prometric_issue_date",
                    models.DateField(blank=True, null=True, verbose_name="Issue Date"),
                ),
                (
                    "Prometric_Appointment_copy",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.candidate_prometric_appointments,
                        verbose_name="Prometric Appointment Copy",
                    ),
                ),
                (
                    "Prometric_expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "Prometric_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("undertaken", "Undertaken"),
                            ("pass", "Pass"),
                            ("fail", "Fail"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Status",
                    ),
                ),
                (
                    "Prometric_certificate_copy",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.candidate_prometric_certificates,
                        verbose_name="Prometric Certificate Copy",
                    ),
                ),
                (
                    "MedicalTest_blood_test",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Blood Test"
                    ),
                ),
                (
                    "MedicalTest_blood_test_report",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.candidate_blood_test_report,
                        verbose_name="Blood Test Report Copy",
                    ),
                ),
                (
                    "MedicalTest_xray_test",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="X-Ray Test"
                    ),
                ),
                (
                    "MedicalTest_xray_test_report",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.candidate_xray_test_report,
                        verbose_name="X-Ray Test Report Copy",
                    ),
                ),
                (
                    "MedicalTest_is_pregnant",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Is Pregnant"
                    ),
                ),
                (
                    "MedicalTest_pregnancy_report",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.candidate_pregnancy_report,
                        verbose_name="Pregnancy Report Copy",
                    ),
                ),
                (
                    "MedicalTest_pregnancy_month",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="How many months"
                    ),
                ),
                (
                    "MedicalTest_fit_to_work",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Fit to Work"
                    ),
                ),
                (
                    "MedicalTest_fit_to_work_report",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.candidate_fit_to_work_report,
                        verbose_name="Fit to Work Report Copy",
                    ),
                ),
                (
                    "TravelDetails_departure_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Departure Date"
                    ),
                ),
                (
                    "TravelDetails_airport",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Airport"
                    ),
                ),
                (
                    "TravelDetails_note",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Note"
                    ),
                ),
                (
                    "Visa_issue_date",
                    models.DateField(blank=True, null=True, verbose_name="Issue Date"),
                ),
                (
                    "Visa_expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "Visa_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("undertaken", "Undertaken"),
                            ("pass", "Pass"),
                            ("fail", "Fail"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Status",
                    ),
                ),
                (
                    "Visa_copy",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=candidates.models.candidate_visa_certificates,
                        verbose_name="Visa Certificate Copy",
                    ),
                ),
                (
                    "candidate",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="application_data",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
                (
                    "follow_up_assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_candidates",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Follow Up Assigned To",
                    ),
                ),
            ],
            options={
                "verbose_name": "Candidate Data",
                "verbose_name_plural": "Candidates Data",
            },
        ),
        migrations.CreateModel(
            name="HistoricalCandidate",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "is_open_to_work",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("NO", "No")],
                        max_length=5,
                        verbose_name="Open to Work",
                    ),
                ),
                ("email", models.EmailField(db_index=True, max_length=254)),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="First Name"
                    ),
                ),
                (
                    "second_name",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="Second Name"
                    ),
                ),
                (
                    "third_name",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="Third Name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="Last Name"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female")],
                        max_length=1,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "birthday",
                    models.DateField(blank=True, null=True, verbose_name="Birthday"),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Address"
                    ),
                ),
                (
                    "call_phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[candidates.models.validate_phone_number],
                        verbose_name="Call Phone Number",
                    ),
                ),
                (
                    "whatsapp_phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[candidates.models.validate_phone_number],
                        verbose_name="WhatsApp Phone Number",
                    ),
                ),
                (
                    "personal_image",
                    models.TextField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Personal Image",
                    ),
                ),
                (
                    "national_id_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="National ID Number",
                    ),
                ),
                (
                    "national_id_copy",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="National ID Copy",
                    ),
                ),
                (
                    "passport_copy",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Passport Copy",
                    ),
                ),
                (
                    "passport_expiration_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Passport Expiration Date"
                    ),
                ),
                (
                    "passport_id",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="Passport ID"
                    ),
                ),
                (
                    "resume_copy",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Resume Copy",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="utilities.country",
                        verbose_name="Country",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "nationality",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="utilities.nationality",
                        verbose_name="Nationality",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Candidate",
                "verbose_name_plural": "historical Candidates",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCandidateApplicationData",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "HMC_Portal_email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name="HMC Portal Email",
                    ),
                ),
                (
                    "HMC_Portal_password",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="HMC Portal Password",
                    ),
                ),
                (
                    "JOB_OFFER_ID",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="JOB OFFER ID",
                    ),
                ),
                (
                    "DataFlow_issue_date",
                    models.DateField(blank=True, null=True, verbose_name="Issue Date"),
                ),
                (
                    "DataFlow_expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "DataFlow_case_number",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Case Number",
                    ),
                ),
                (
                    "DataFlow_passport_number",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Passport Number",
                    ),
                ),
                (
                    "DataFlow_is_paid",
                    models.BooleanField(
                        blank=True, default=False, null=True, verbose_name="Is Paid"
                    ),
                ),
                (
                    "DataFlow_certificate_copy",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="DataFlow Certificate Copy",
                    ),
                ),
                (
                    "DHP_email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name="Email"
                    ),
                ),
                (
                    "DHP_number",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="DHP Number"
                    ),
                ),
                (
                    "DHP_Password",
                    models.CharField(
                        blank=True,
                        default="###",
                        max_length=50,
                        null=True,
                        verbose_name="DHP Password",
                    ),
                ),
                (
                    "DHP_issue_date",
                    models.DateField(blank=True, null=True, verbose_name="Issue Date"),
                ),
                (
                    "DHP_expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "DHP_copy",
                    models.TextField(
                        blank=True,
                        help_text="DHP certificate",
                        max_length=100,
                        null=True,
                        verbose_name="DHP Certificate Copy",
                    ),
                ),
                (
                    "DHP_note",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Note"
                    ),
                ),
                (
                    "is_dataflow",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="Is Dataflow Candidate",
                    ),
                ),
                (
                    "is_Prometric",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="Is Prometric Candidate",
                    ),
                ),
                (
                    "is_completed_payment",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="Is Complete Payment",
                    ),
                ),
                (
                    "PCC_issue_date",
                    models.DateField(blank=True, null=True, verbose_name="Issue Date"),
                ),
                (
                    "PCC_is_stamp",
                    models.BooleanField(
                        blank=True, default=False, null=True, verbose_name="Is Stamped"
                    ),
                ),
                (
                    "PCC_clearance_copy",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Police Clearance Certificate Copy",
                    ),
                ),
                (
                    "PCC_expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "Prometric_issue_date",
                    models.DateField(blank=True, null=True, verbose_name="Issue Date"),
                ),
                (
                    "Prometric_Appointment_copy",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Prometric Appointment Copy",
                    ),
                ),
                (
                    "Prometric_expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "Prometric_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("undertaken", "Undertaken"),
                            ("pass", "Pass"),
                            ("fail", "Fail"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Status",
                    ),
                ),
                (
                    "Prometric_certificate_copy",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Prometric Certificate Copy",
                    ),
                ),
                (
                    "MedicalTest_blood_test",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Blood Test"
                    ),
                ),
                (
                    "MedicalTest_blood_test_report",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Blood Test Report Copy",
                    ),
                ),
                (
                    "MedicalTest_xray_test",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="X-Ray Test"
                    ),
                ),
                (
                    "MedicalTest_xray_test_report",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="X-Ray Test Report Copy",
                    ),
                ),
                (
                    "MedicalTest_is_pregnant",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Is Pregnant"
                    ),
                ),
                (
                    "MedicalTest_pregnancy_report",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Pregnancy Report Copy",
                    ),
                ),
                (
                    "MedicalTest_pregnancy_month",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="How many months"
                    ),
                ),
                (
                    "MedicalTest_fit_to_work",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Fit to Work"
                    ),
                ),
                (
                    "MedicalTest_fit_to_work_report",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Fit to Work Report Copy",
                    ),
                ),
                (
                    "TravelDetails_departure_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Departure Date"
                    ),
                ),
                (
                    "TravelDetails_airport",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Airport"
                    ),
                ),
                (
                    "TravelDetails_note",
                    ckeditor.fields.RichTextField(
                        blank=True, null=True, verbose_name="Note"
                    ),
                ),
                (
                    "Visa_issue_date",
                    models.DateField(blank=True, null=True, verbose_name="Issue Date"),
                ),
                (
                    "Visa_expiry_date",
                    models.DateField(blank=True, null=True, verbose_name="Expiry Date"),
                ),
                (
                    "Visa_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("undertaken", "Undertaken"),
                            ("pass", "Pass"),
                            ("fail", "Fail"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Status",
                    ),
                ),
                (
                    "Visa_copy",
                    models.TextField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Visa Certificate Copy",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
                (
                    "follow_up_assigned_to",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Follow Up Assigned To",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Candidate Data",
                "verbose_name_plural": "historical Candidates Data",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEducation",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Enter the start date of the education.",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Enter the end date of the education, if applicable.",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "online",
                    models.BooleanField(
                        default=False,
                        help_text="Check if the education was taken online.",
                        verbose_name="Online",
                    ),
                ),
                (
                    "gpa",
                    models.FloatField(
                        blank=True,
                        help_text="Enter the GPA obtained (e.g., 3.5).",
                        null=True,
                        verbose_name="GPA",
                    ),
                ),
                (
                    "certification_copy",
                    models.TextField(
                        blank=True,
                        help_text="Upload a copy of the certification obtained during this education.",
                        max_length=100,
                        verbose_name="Certification Copy",
                    ),
                ),
                (
                    "transcript_copy",
                    models.TextField(
                        blank=True,
                        help_text="Upload a copy of the transcript for this education.",
                        max_length=100,
                        verbose_name="Transcript Copy",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The date and time when this record was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Updated At",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Select the candidate for this education.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
                (
                    "degree",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Select the degree obtained (e.g., Bachelor, Master).",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="utilities.degreechoices",
                        verbose_name="Degree",
                    ),
                ),
                (
                    "field_of_study",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Select the field of study.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="utilities.fieldofstudy",
                        verbose_name="Field of Study",
                    ),
                ),
                (
                    "grade",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Select the grade obtained (e.g., A, B+).",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="utilities.educationgradechoices",
                        verbose_name="Grade",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Select the institution.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="utilities.institution",
                        verbose_name="Institution",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Education",
                "verbose_name_plural": "historical Educations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalExperience",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        help_text="Enter the name of the company.",
                        max_length=255,
                        verbose_name="Company Name",
                    ),
                ),
                (
                    "company_location",
                    django_countries.fields.CountryField(
                        help_text="Enter the location of the company.",
                        max_length=2,
                        verbose_name="Company Location",
                    ),
                ),
                (
                    "reference_name",
                    models.CharField(
                        blank=True,
                        help_text="Enter the name of the reference person, such as HR or Manager.",
                        max_length=255,
                        null=True,
                        verbose_name="Reference Name",
                    ),
                ),
                (
                    "reference_job_title",
                    models.CharField(
                        blank=True,
                        help_text="Enter the job title of the reference person.",
                        max_length=255,
                        null=True,
                        verbose_name="Reference Job Title",
                    ),
                ),
                (
                    "reference_contact_info",
                    models.CharField(
                        blank=True,
                        help_text="Enter the contact details (phone or email) of the reference person.",
                        max_length=255,
                        null=True,
                        verbose_name="Reference Contact Information",
                    ),
                ),
                (
                    "job_title",
                    models.CharField(
                        help_text="Enter the job title for this experience.",
                        max_length=255,
                        verbose_name="Job Title",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Enter the start date of the experience.",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Enter the end date of the experience, if applicable.",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "job_responsibilities",
                    ckeditor.fields.RichTextField(
                        blank=True,
                        help_text="Enter the job responsibilities.",
                        null=True,
                        verbose_name="Job Responsibilities",
                    ),
                ),
                (
                    "certification_copy",
                    models.TextField(
                        blank=True,
                        help_text="Upload a copy of any certifications obtained during this experience.",
                        max_length=100,
                        null=True,
                        verbose_name="Certification Copy",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The date and time when this record was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Updated At",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Select the candidate for this experience.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Experience",
                "verbose_name_plural": "historical Experiences",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalLicense",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "license_name",
                    models.CharField(
                        default="Nursing",
                        help_text="Enter the name of the license (e.g., Driving License, Medical License).",
                        max_length=255,
                        verbose_name="License Name",
                    ),
                ),
                (
                    "license_number",
                    models.CharField(
                        help_text="Enter the unique license number.",
                        max_length=100,
                        verbose_name="License Number",
                    ),
                ),
                (
                    "issued_date",
                    models.DateField(
                        help_text="Enter the date when the license was issued.",
                        verbose_name="Issued Date",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True,
                        help_text="Enter the expiry date of the license, if applicable. Leave blank if the license doesn't expire.",
                        null=True,
                        verbose_name="Expiry Date",
                    ),
                ),
                (
                    "license_copy",
                    models.TextField(
                        blank=True,
                        help_text="Upload a scanned copy of the license (optional).",
                        max_length=100,
                        null=True,
                        verbose_name="License Copy",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The date and time when this record was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Updated At",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Select the candidate associated with this license.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "license_provider",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Select the organization or provider issuing the license.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="utilities.licenseprovider",
                        verbose_name="License Provider",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical License",
                "verbose_name_plural": "historical Licenses",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalTrainingCourse",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "course_name",
                    models.CharField(
                        help_text="Enter the title of the training course (e.g., Advanced Python Programming).",
                        max_length=255,
                        verbose_name="Course Name",
                    ),
                ),
                (
                    "institution",
                    models.CharField(
                        help_text="Enter the name of the institution providing the training course.",
                        max_length=255,
                        verbose_name="Institution",
                    ),
                ),
                (
                    "location",
                    django_countries.fields.CountryField(
                        blank=True,
                        help_text="Enter the country where the training course was held.",
                        max_length=2,
                        null=True,
                        verbose_name="Location",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Enter the start date of the training course.",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Enter the end date of the training course. Leave blank if ongoing.",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "description",
                    ckeditor.fields.RichTextField(
                        blank=True,
                        help_text="Provide additional details about the course, such as the subjects covered or skills acquired.",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "certification_copy",
                    models.TextField(
                        blank=True,
                        help_text="Upload the certification copy, if available.",
                        max_length=100,
                        null=True,
                        verbose_name="Certification Copy",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The date and time when this record was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Updated At",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Select the candidate associated with this training course.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Training Course",
                "verbose_name_plural": "historical Training Courses",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        help_text="Select the candidate for this language.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="languages",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        help_text="Select the language.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="languages",
                        to="utilities.languagechoices",
                        verbose_name="Language",
                    ),
                ),
            ],
            options={
                "verbose_name": "Language",
                "verbose_name_plural": "Languages",
                "ordering": ["language"],
            },
        ),
        migrations.CreateModel(
            name="Education",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Enter the start date of the education.",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Enter the end date of the education, if applicable.",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "online",
                    models.BooleanField(
                        default=False,
                        help_text="Check if the education was taken online.",
                        verbose_name="Online",
                    ),
                ),
                (
                    "gpa",
                    models.FloatField(
                        blank=True,
                        help_text="Enter the GPA obtained (e.g., 3.5).",
                        null=True,
                        verbose_name="GPA",
                    ),
                ),
                (
                    "certification_copy",
                    models.FileField(
                        blank=True,
                        help_text="Upload a copy of the certification obtained during this education.",
                        upload_to=candidates.models.education_certification_upload_path,
                        verbose_name="Certification Copy",
                    ),
                ),
                (
                    "transcript_copy",
                    models.FileField(
                        blank=True,
                        help_text="Upload a copy of the transcript for this education.",
                        upload_to=candidates.models.education_transcript_upload_path,
                        verbose_name="Transcript Copy",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when this record was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        help_text="Select the candidate for this education.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="educations",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
                (
                    "degree",
                    models.ForeignKey(
                        help_text="Select the degree obtained (e.g., Bachelor, Master).",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="utilities.degreechoices",
                        verbose_name="Degree",
                    ),
                ),
                (
                    "field_of_study",
                    models.ForeignKey(
                        help_text="Select the field of study.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="utilities.fieldofstudy",
                        verbose_name="Field of Study",
                    ),
                ),
                (
                    "grade",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the grade obtained (e.g., A, B+).",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="utilities.educationgradechoices",
                        verbose_name="Grade",
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        help_text="Select the institution.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="utilities.institution",
                        verbose_name="Institution",
                    ),
                ),
            ],
            options={
                "verbose_name": "Education",
                "verbose_name_plural": "Educations",
                "ordering": ["-start_date"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("end_date__gte", models.F("start_date")),
                            ("end_date__isnull", True),
                            _connector="OR",
                        ),
                        name="education_end_date_after_start_date",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Experience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        help_text="Enter the name of the company.",
                        max_length=255,
                        verbose_name="Company Name",
                    ),
                ),
                (
                    "company_location",
                    django_countries.fields.CountryField(
                        help_text="Enter the location of the company.",
                        max_length=2,
                        verbose_name="Company Location",
                    ),
                ),
                (
                    "reference_name",
                    models.CharField(
                        blank=True,
                        help_text="Enter the name of the reference person, such as HR or Manager.",
                        max_length=255,
                        null=True,
                        verbose_name="Reference Name",
                    ),
                ),
                (
                    "reference_job_title",
                    models.CharField(
                        blank=True,
                        help_text="Enter the job title of the reference person.",
                        max_length=255,
                        null=True,
                        verbose_name="Reference Job Title",
                    ),
                ),
                (
                    "reference_contact_info",
                    models.CharField(
                        blank=True,
                        help_text="Enter the contact details (phone or email) of the reference person.",
                        max_length=255,
                        null=True,
                        verbose_name="Reference Contact Information",
                    ),
                ),
                (
                    "job_title",
                    models.CharField(
                        help_text="Enter the job title for this experience.",
                        max_length=255,
                        verbose_name="Job Title",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Enter the start date of the experience.",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Enter the end date of the experience, if applicable.",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "job_responsibilities",
                    ckeditor.fields.RichTextField(
                        blank=True,
                        help_text="Enter the job responsibilities.",
                        null=True,
                        verbose_name="Job Responsibilities",
                    ),
                ),
                (
                    "certification_copy",
                    models.FileField(
                        blank=True,
                        help_text="Upload a copy of any certifications obtained during this experience.",
                        null=True,
                        upload_to=candidates.models.experience_certification_upload_path,
                        verbose_name="Certification Copy",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when this record was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        help_text="Select the candidate for this experience.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="experiences",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
                (
                    "departments",
                    models.ManyToManyField(
                        to="utilities.department", verbose_name="Departments"
                    ),
                ),
            ],
            options={
                "verbose_name": "Experience",
                "verbose_name_plural": "Experiences",
                "ordering": ["-start_date"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("end_date__gte", models.F("start_date")),
                            ("end_date__isnull", True),
                            _connector="OR",
                        ),
                        name="experience_end_date_after_start_date",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="License",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "license_name",
                    models.CharField(
                        default="Nursing",
                        help_text="Enter the name of the license (e.g., Driving License, Medical License).",
                        max_length=255,
                        verbose_name="License Name",
                    ),
                ),
                (
                    "license_number",
                    models.CharField(
                        help_text="Enter the unique license number.",
                        max_length=100,
                        verbose_name="License Number",
                    ),
                ),
                (
                    "issued_date",
                    models.DateField(
                        help_text="Enter the date when the license was issued.",
                        verbose_name="Issued Date",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True,
                        help_text="Enter the expiry date of the license, if applicable. Leave blank if the license doesn't expire.",
                        null=True,
                        verbose_name="Expiry Date",
                    ),
                ),
                (
                    "license_copy",
                    models.FileField(
                        blank=True,
                        help_text="Upload a scanned copy of the license (optional).",
                        null=True,
                        upload_to=candidates.models.license_upload_path,
                        verbose_name="License Copy",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when this record was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        help_text="Select the candidate associated with this license.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="licenses",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
                (
                    "license_provider",
                    models.ForeignKey(
                        help_text="Select the organization or provider issuing the license.",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="utilities.licenseprovider",
                        verbose_name="License Provider",
                    ),
                ),
            ],
            options={
                "verbose_name": "License",
                "verbose_name_plural": "Licenses",
                "ordering": ["-issued_date"],
                "unique_together": {("candidate", "license_number")},
            },
        ),
        migrations.CreateModel(
            name="TrainingCourse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "course_name",
                    models.CharField(
                        help_text="Enter the title of the training course (e.g., Advanced Python Programming).",
                        max_length=255,
                        verbose_name="Course Name",
                    ),
                ),
                (
                    "institution",
                    models.CharField(
                        help_text="Enter the name of the institution providing the training course.",
                        max_length=255,
                        verbose_name="Institution",
                    ),
                ),
                (
                    "location",
                    django_countries.fields.CountryField(
                        blank=True,
                        help_text="Enter the country where the training course was held.",
                        max_length=2,
                        null=True,
                        verbose_name="Location",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Enter the start date of the training course.",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Enter the end date of the training course. Leave blank if ongoing.",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "description",
                    ckeditor.fields.RichTextField(
                        blank=True,
                        help_text="Provide additional details about the course, such as the subjects covered or skills acquired.",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "certification_copy",
                    models.FileField(
                        blank=True,
                        help_text="Upload the certification copy, if available.",
                        null=True,
                        upload_to=candidates.models.training_course_certification_upload_path,
                        verbose_name="Certification Copy",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when this record was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time when this record was last updated.",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        help_text="Select the candidate associated with this training course.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_courses",
                        to="candidates.candidate",
                        verbose_name="Candidate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Training Course",
                "verbose_name_plural": "Training Courses",
                "ordering": ["-start_date"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("end_date__gte", models.F("start_date")),
                            ("end_date__isnull", True),
                            _connector="OR",
                        ),
                        name="training_course_end_date_after_start_date",
                    )
                ],
                "unique_together": {("candidate", "course_name", "start_date")},
            },
        ),
    ]
